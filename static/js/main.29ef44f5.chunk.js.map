{"version":3,"sources":["components/WeatherBox.jsx","App.js","serviceWorker.js","index.js","media/undraw_weather_app_i5sm.svg"],"names":["WeatherBox","state","city","curr_temp","min_temp","max_temp","weather","icon","handleChange","event","setState","target","value","onSend","currentComponent","axios","get","then","response","data","main","temp","temp_max","temp_min","catch","error","console","log","className","sm","md","lg","src","WeatherLogo","alt","width","height","id","placeholder","onChange","this","theme","onClick","React","Component","App","basename","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.29ef44f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  FormInput,\r\n  Form,\r\n  FormGroup,\r\n  Button,\r\n} from \"shards-react\";\r\nimport WeatherLogo from \"../media/undraw_weather_app_i5sm.svg\";\r\n\r\nexport default class WeatherBox extends React.Component {\r\n  state = {\r\n    city: \"\",\r\n    curr_temp: 0,\r\n    min_temp: 0,\r\n    max_temp: 0,\r\n    weather: \"\",\r\n    icon: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ city: event.target.value });\r\n  };\r\n\r\n  onSend = () => {\r\n    let currentComponent = this;\r\n    const city = this.state.city;\r\n\r\n    axios\r\n      .get(\r\n        \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n          city +\r\n          \"&units=metric&lang=es&mode=json&appid=d38973609069c440f57df3dc66583cec\"\r\n      )\r\n      .then(function (response) {\r\n        currentComponent.setState({\r\n          curr_temp: response.data.main.temp,\r\n          max_temp: response.data.main.temp_max,\r\n          min_temp: response.data.main.temp_min,\r\n          weather: response.data.weather[0].main,\r\n          icon: 'http://openweathermap.org/img/wn/' + response.data.weather[0].icon + '@2x.png',\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .then(function () {\r\n        // always executed\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Row className=\"d-flex justify-content-center align-middle\">\r\n            <Col sm=\"12\" md=\"8\" lg=\"8\">\r\n              <Card className=\"mt-5\">\r\n                <CardBody>\r\n                  <Form>\r\n                    <Row className=\"d-flex justify-content-center align-middle\">\r\n                      <Col className=\"text-center my-1\" sm=\"12\" md=\"12\" lg=\"12\">\r\n                        <img\r\n                          src={WeatherLogo}\r\n                          alt=\"Weather Logo\"\r\n                          width=\"240\"\r\n                          height=\"120\"\r\n                        />\r\n                      </Col>\r\n                      <Col className=\"text-center my-2\" sm=\"12\" md=\"12\" lg=\"12\">\r\n                        <h1>Weather App</h1>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col sm=\"9\" md=\"9\" lg=\"9\">\r\n                        <FormGroup>\r\n                          <FormInput\r\n                            id=\"#city\"\r\n                            placeholder=\"Ciudad\"\r\n                            onChange={this.handleChange}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col sm=\"3\" md=\"3\" lg=\"3\">\r\n                        <FormGroup>\r\n                          <Button\r\n                            className=\"form-control\"\r\n                            theme=\"success\"\r\n                            onClick={this.onSend}\r\n                          >\r\n                            Buscar\r\n                          </Button>\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </Form>\r\n                  <Row>\r\n                    <Col sm=\"12\" md=\"12\" lg=\"12\">\r\n                      {this.state.weather !== \"\" && (\r\n                        <>\r\n                          <Row className=\"mb-0 mt-0 p-0\">\r\n                            <Col className=\"d-flex justify-content-center\">\r\n                              <img src={ this.state.icon } alt=\"Weather Icon\" />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col className=\"d-flex justify-content-center mb-0 mt-0\">\r\n                              <h6>{ this.state.weather }</h6>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>Actual { this.state.curr_temp  } °C </Col>\r\n                            <Col>Minima { this.state.min_temp } °C </Col>\r\n                            <Col>Maxima { this.state.max_temp } °C </Col>\r\n                         </Row>\r\n                        </>\r\n                      )}\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\nimport \"./App.css\";\nimport WeatherBox from \"./components/WeatherBox\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => {\n            return (\n              <div>\n                <WeatherBox />\n              </div>\n            );\n          }}\n        ></Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/undraw_weather_app_i5sm.16670a3d.svg\";"],"sourceRoot":""}